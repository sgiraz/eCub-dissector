# eCub Protocolo field descriptions

###############################################################################
# User defined types
###############################################################################
enum8 T_ROPC
{
    ask         1
    say         2
    set         3
    sig         4
    rst         5
}

bitfield8 T_CTRL
{
  uint2             confinfo;             # lower level bits
  uint1             plustime;
  uint1             plussign;
  uint1             rqsttime;
  uint1             rqstconf;
  uint2             version;              # higher level bits
}

# struct tags
# {
#   var string[4]                  var_str_array = "cent trente six";

#   #set var_str_array[0] = "ciao";
# }

function string tag2string (in uint8 endpoint, in uint8 entity, in uint8 tag)
{
    # tags string array
    hide var string[2][4][24]       var_str_array = "Not yet implemented";
    # endpoint mn (0), entity comm (0)
    set var_str_array[0][0][0] =                "{eoprot_tag_mn_comm_wholeitem}";
    set var_str_array[0][0][1] =                "{eoprot_tag_mn_comm_status}";
    set var_str_array[0][0][2] =                "{eoprot_tag_mn_comm_status_managementprotocolversion}";
    set var_str_array[0][0][3] =                "{eoprot_tag_mn_comm_cmmnds_command_querynumof}";
    set var_str_array[0][0][4] =                "{eoprot_tag_mn_comm_cmmnds_command_queryarray}";
    set var_str_array[0][0][5] =                "{eoprot_tag_mn_comm_cmmnds_command_replynumof}";
    set var_str_array[0][0][6] =                "{eoprot_tag_mn_comm_cmmnds_command_replyarray}";
    set var_str_array[0][0][7] =                "{eoprot_tag_mn_comm_cmmnds_command_config}";

    # endpoint mn (0), entity appl (1)
    set var_str_array[0][1][0] =                "{eoprot_tag_mn_appl_wholeitem}";
    set var_str_array[0][1][1] =                "{eoprot_tag_mn_appl_config}";
    set var_str_array[0][1][2] =                "{eoprot_tag_mn_appl_config_txratedivider}";
    set var_str_array[0][1][3] =                "{eoprot_tag_mn_appl_status}";
    set var_str_array[0][1][4] =                "{eoprot_tag_mn_appl_cmmnds_go2state}";
    set var_str_array[0][1][5] =                "{eoprot_tag_mn_appl_cmmnds_timeset}";

    # endpoint mn (0), entity info (2)
    set var_str_array[0][2][0] =                "{eoprot_tag_mn_info_wholeitem}";
    set var_str_array[0][2][1] =                "{eoprot_tag_mn_info_config}";
    set var_str_array[0][2][2] =                "{eoprot_tag_mn_info_config_enabled}";
    set var_str_array[0][2][3] =                "{eoprot_tag_mn_info_status}";
    set var_str_array[0][2][4] =                "{eoprot_tag_mn_info_status_basic}";

    # endpoint mn (0), entity service (3)
    set var_str_array[0][3][0] =                "{eoprot_tag_mn_service_wholeitem}";
    set var_str_array[0][3][1] =                "{eoprot_tag_mn_service_status_commandresult}";
    set var_str_array[0][3][2] =                "{eoprot_tag_mn_service_cmmnds_command}";

    # endpoint mc (1), entity joint (0)
    set var_str_array[1][0][0] =                "{eoprot_tag_mc_joint_wholeitem}";
    set var_str_array[1][0][1] =                "{eoprot_tag_mc_joint_config}";
    set var_str_array[1][0][2] =                "{eoprot_tag_mc_joint_config_pidposition}";
    set var_str_array[1][0][3] =                "{eoprot_tag_mc_joint_config_pidvelocity}";
    set var_str_array[1][0][4] =                "{eoprot_tag_mc_joint_config_pidtorque}";
    set var_str_array[1][0][5] =                "{eoprot_tag_mc_joint_config_userlimits}";
    set var_str_array[1][0][6] =                "{eoprot_tag_mc_joint_config_impedance}";
    set var_str_array[1][0][7] =                "{eoprot_tag_mc_joint_config_motor_params}";
    set var_str_array[1][0][8] =                "{eoprot_tag_mc_joint_config_tcfiltertype}";
    set var_str_array[1][0][9] =                "{eoprot_tag_mc_joint_status}";
    set var_str_array[1][0][10] =                "{eoprot_tag_mc_joint_status_core}";
    set var_str_array[1][0][11] =                "{eoprot_tag_mc_joint_status_target}";
    set var_str_array[1][0][12] =                "{eoprot_tag_mc_joint_status_core_modes_controlmodestatus}";
    set var_str_array[1][0][13] =                "{eoprot_tag_mc_joint_status_core_modes_interactionmodestatus}";
    set var_str_array[1][0][14] =                "{eoprot_tag_mc_joint_status_core_modes_ismotiondone}";
    set var_str_array[1][0][15] =                "{eoprot_tag_mc_joint_status_addinfo_multienc}";
    set var_str_array[1][0][16] =                "{eoprot_tag_mc_joint_status_debug}";
    set var_str_array[1][0][17] =                "{eoprot_tag_mc_joint_inputs}";
    set var_str_array[1][0][18] =                "{eoprot_tag_mc_joint_inputs_externallymeasuredtorque}";
    set var_str_array[1][0][19] =                "{eoprot_tag_mc_joint_cmmnds_calibration}";
    set var_str_array[1][0][20] =                "{eoprot_tag_mc_joint_cmmnds_setpoint}";
    set var_str_array[1][0][21] =                "{eoprot_tag_mc_joint_cmmnds_stoptrajectory}";
    set var_str_array[1][0][22] =                "{eoprot_tag_mc_joint_cmmnds_controlmode}";
    set var_str_array[1][0][23] =                "{eoprot_tag_mc_joint_cmmnds_interactionmode}";

    return var_str_array[endpoint][entity][tag];
}



struct T_ID
{
    uint8             tag;
    uint8             number;
    uint8             entity;
    uint8             endpoint;

    note ("%s: %s", ropc, tag2string(endpoint, entity, tag));
    #print ("modif var_str_array[var_idx+1] = %s", var_str_array[var_idx+1]);
}



function uint16 getEffectiveSizeFrom (in uint16 datasize)
{
    # if datasize is multiple of 4, return datasize
    if (datasize % 4 == 0)
    {
        return datasize;
    }
    # else return padded with zeros to become of total length a multiple of four
    else
    {
        return datasize + (4 - (datasize % 4));
    }
}

struct T_ROP
{
    T_CTRL                                  ctrl;
    T_ROPC                                  ropc;
    uint16                                  datasize;
    T_ID                                    id;

    if (datasize > 0)
    {
        hide uint8[getEffectiveSizeFrom (datasize)]  data;
    }
    
    if (ctrl.plussign == 1)
    {
        uint32                              signature;
    }

    if (ctrl.plustime == 1)
    {
        int64                               time;
    }
}


###############################################################################
# Message identifier
###############################################################################
enum32  T_Type_message
{
    start_code       305419896 # Used to recognize a valid ROPframe: 0x12345678
}


###############################################################################
# Header
###############################################################################
struct  T_msg_header_type_wsgd
{
    byte_order       little_endian;
    
    T_Type_message{d=hex}    Type; # start_code
    uint16                   size_of_body;
    uint16                   number_of_rops;
    int64                    sequence_number;
    int64                    age_of_frame;
}

struct  T_msg_header_type
{
  T_msg_header_type_wsgd  "";
}


###############################################################################
# Messages
###############################################################################
# # 1st Message
# # All your messages begin by the header.
# # The data byte order is already specified inside the header.
struct  T_msg_cs_start
{
  T_msg_header_type                          Header;
  T_ROP[Header.number_of_rops]               ROP;
  uint32{d=hex}                              Footer;
}


###############################################################################
# Main switch
###############################################################################
# Message switch case
# You need to link each message identifier with the corresponding message type.
# You must define a switch with a parameter = message identifier type.
switch  T_msg_switch  T_Type_message
{
case  T_Type_message::start_code : T_msg_cs_start "";  # "" permits to avoid a useless supplementary tree

default        : 
  # fatal ("Unknow msg identifier %d (%s)", Type, Type);
  T_msg_header_type        Header;
  raw(*)                   the_end_of_the_message;
}

###############################################################################
# Main type
# With the current definition,
#  "MSG_MAIN_TYPE      T_msg_main_type" is strictly identical to
#  "MSG_MAIN_TYPE      T_msg_switch(Type)"
#  inside <file>.wsgd
###############################################################################

# struct  T_msg_main_type
# {
#   T_msg_switch(Type)    "";
# }